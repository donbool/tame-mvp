[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tamesdk"
version = "1.0.0"
description = "Runtime control and policy enforcement for AI agents"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tame Team", email = "team@tame.dev"}
]
maintainers = [
    {name = "Tame Team", email = "team@tame.dev"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]
keywords = ["ai", "agents", "policy", "security", "monitoring", "runtime-control"]
version = "1.0.0"
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
cli = [
    "rich>=13.0.0",
    "typer>=0.9.0",
]
mcp = [
    "mcp>=1.0.0",
]
openai = [
    "openai>=1.0.0",
]
anthropic = [
    "anthropic>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/tame/tamesdk"
Documentation = "https://docs.tame.dev/sdk"
Repository = "https://github.com/tame/tamesdk"
Issues = "https://github.com/tame/tamesdk/issues"
Changelog = "https://github.com/tame/tamesdk/blob/main/CHANGELOG.md"

[project.scripts]
tamesdk = "tamesdk.cli:main"
tame = "tamesdk.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["tamesdk*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
tamesdk = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["tamesdk"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]