#!/usr/bin/env python3
"""
TameSDK CLI - Command-line interface for policy enforcement and session management.

Usage:
    tamesdk enforce --tool search_web --args '{"query": "python"}' --session my-session
    tamesdk sessions list
    tamesdk sessions logs <session_id>
    tamesdk policy info
    tamesdk policy test --tool delete_file --args '{"path": "/tmp/test"}'
    tamesdk interactive
"""

import argparse
import json
import sys
import os
from typing import Dict, Any, Optional
from datetime import datetime

try:
    import tamesdk
except ImportError:
    print("Error: tamesdk package not found. Please install with 'pip install tamesdk'")
    sys.exit(1)


def format_timestamp(timestamp_str: str) -> str:
    """Format timestamp for display."""
    try:
        dt = datetime.fromisoformat(timestamp_str.replace("Z", "+00:00"))
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except:
        return timestamp_str


def format_decision(decision: tamesdk.EnforcementDecision) -> str:
    """Format enforcement decision for display."""
    color_map = {
        "allow": "\033[92m",  # Green
        "deny": "\033[91m",   # Red
        "approve": "\033[93m" # Yellow
    }
    reset_color = "\033[0m"
    
    color = color_map.get(decision.action.value, "")
    
    return f"""
{color}Decision: {decision.action.value.upper()}{reset_color}
Session ID: {decision.session_id}
Tool: {decision.tool_name}
Rule: {decision.rule_name or 'N/A'}
Reason: {decision.reason}
Policy Version: {decision.policy_version}
Log ID: {decision.log_id}
Timestamp: {format_timestamp(decision.timestamp.isoformat())}
"""


def cmd_enforce(args):
    """Handle enforce command."""
    try:
        # Parse tool arguments
        tool_args = {}
        if args.args:
            try:
                tool_args = json.loads(args.args)
            except json.JSONDecodeError as e:
                print(f"Error: Invalid JSON in --args: {e}")
                return 1
        
        # Parse metadata
        metadata = {}
        if args.metadata:
            try:
                metadata = json.loads(args.metadata)
            except json.JSONDecodeError as e:
                print(f"Error: Invalid JSON in --metadata: {e}")
                return 1
        
        # Create client
        with tamesdk.Client(
            api_url=args.api_url,
            session_id=args.session,
            agent_id=args.agent,
            user_id=args.user
        ) as client:
            
            # Enforce policy
            decision = client.enforce(
                tool_name=args.tool,
                tool_args=tool_args,
                metadata=metadata,
                raise_on_deny=False,
                raise_on_approve=False
            )
            
            print(format_decision(decision))
            
            # Exit with appropriate code
            if decision.action.value == "deny":
                return 2
            elif decision.action.value == "approve":
                return 3
            else:
                return 0
                
    except tamesdk.TameSDKException as e:
        print(f"Error: {e}")
        return 1
    except Exception as e:
        print(f"Unexpected error: {e}")
        return 1


def cmd_policy_info(args):
    """Handle policy info command."""
    try:
        with tamesdk.Client(api_url=args.api_url) as client:
            policy_info = client.get_policy_info()
            
            print("\nCurrent Policy Information:")
            print("=" * 40)
            print(f"Version: {policy_info.version}")
            print(f"Hash: {policy_info.hash}")
            print(f"Rules Count: {policy_info.rules_count}")
            print(f"Last Updated: {format_timestamp(policy_info.last_updated.isoformat())}")
            print(f"Active: {'Yes' if policy_info.active else 'No'}")
            
            if policy_info.description:
                print(f"Description: {policy_info.description}")
        
        return 0
        
    except Exception as e:
        print(f"Error: {e}")
        return 1


def cmd_test(args):
    """Handle test command."""
    try:
        # Parse tool arguments
        tool_args = {}
        if args.args:
            try:
                tool_args = json.loads(args.args)
            except json.JSONDecodeError as e:
                print(f"Error: Invalid JSON in --args: {e}")
                return 1
        
        with tamesdk.Client(api_url=args.api_url) as client:
            decision = client.enforce(
                tool_name=args.tool,
                tool_args=tool_args,
                raise_on_deny=False,
                raise_on_approve=False
            )
            
            print(format_decision(decision))
            
            return 0
        
    except Exception as e:
        print(f"Error: {e}")
        return 1


def cmd_status(args):
    """Handle status command."""
    try:
        with tamesdk.Client(api_url=args.api_url) as client:
            policy_info = client.get_policy_info()
            
            print("‚úÖ TameSDK Connection: OK")
            print(f"üìã Policy Version: {policy_info.version}")
            print(f"üìä Rules Count: {policy_info.rules_count}")
            print(f"üïê Last Updated: {format_timestamp(policy_info.last_updated.isoformat())}")
            print(f"üÜî Session ID: {client.session_id}")
            
            if client.agent_id:
                print(f"ü§ñ Agent ID: {client.agent_id}")
            if client.user_id:
                print(f"üë§ User ID: {client.user_id}")
                
        return 0
        
    except Exception as e:
        print(f"‚ùå Failed to connect to Tame API: {e}")
        return 1


def cmd_interactive(args):
    """Handle interactive mode."""
    print("üöÄ TameSDK Interactive Mode")
    print("Type 'help' for available commands, 'quit' to exit")
    
    try:
        with tamesdk.Client(api_url=args.api_url) as client:
            while True:
                try:
                    command = input("\ntamesdk> ").strip()
                    
                    if command in ['quit', 'exit', 'q']:
                        print("üëã Goodbye!")
                        break
                    elif command == 'help':
                        print("""
Available commands:
  test <tool_name> [args]  - Test a tool call
  status                   - Check API status  
  policy                   - Show policy info
  config                   - Show configuration
  help                     - Show this help
  quit                     - Exit interactive mode
                        """)
                    elif command == 'status':
                        cmd_status(args)
                    elif command == 'policy':
                        cmd_policy_info(args)
                    elif command == 'config':
                        config = tamesdk.get_config()
                        print(f"API URL: {config.api_url}")
                        print(f"Session ID: {config.session_id}")
                        print(f"Bypass mode: {config.bypass_mode}")
                    elif command.startswith('test '):
                        parts = command.split(' ', 2)
                        tool_name = parts[1] if len(parts) > 1 else ""
                        tool_args_str = parts[2] if len(parts) > 2 else ""
                        
                        if not tool_name:
                            print("‚ùå Please specify a tool name")
                            continue
                        
                        # Parse args
                        tool_args = {}
                        if tool_args_str:
                            try:
                                tool_args = json.loads(tool_args_str)
                            except json.JSONDecodeError:
                                # Try simple key=value format
                                for pair in tool_args_str.split(','):
                                    if '=' in pair:
                                        key, value = pair.split('=', 1)
                                        tool_args[key.strip()] = value.strip()
                        
                        decision = client.enforce(
                            tool_name,
                            tool_args,
                            raise_on_deny=False,
                            raise_on_approve=False
                        )
                        print(format_decision(decision))
                        
                    elif command:
                        print(f"‚ùå Unknown command: {command}")
                        print("Type 'help' for available commands")
                        
                except KeyboardInterrupt:
                    print("\nüëã Goodbye!")
                    break
                except Exception as e:
                    print(f"‚ùå Error: {e}")
    
    except Exception as e:
        print(f"‚ùå Failed to initialize client: {e}")
        return 1
    
    return 0


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="TameSDK CLI - Policy enforcement and session management",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  tamesdk status
  tamesdk test read_file --args '{"path": "/tmp/file.txt"}'
  tamesdk enforce --tool delete_file --args '{"path": "/tmp/test"}'
  tamesdk interactive
        """
    )
    
    # Global options
    parser.add_argument(
        "--api-url",
        default=os.getenv("TAME_API_URL", "http://localhost:8000"),
        help="Tame API URL (default: http://localhost:8000)"
    )
    parser.add_argument(
        "--session",
        help="Session ID"
    )
    parser.add_argument(
        "--agent",
        help="Agent ID"
    )
    parser.add_argument(
        "--user",
        help="User ID"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Status command
    status_parser = subparsers.add_parser("status", help="Check API connection status")
    status_parser.set_defaults(func=cmd_status)
    
    # Test command
    test_parser = subparsers.add_parser("test", help="Test a tool call against policy")
    test_parser.add_argument("tool", help="Tool name")
    test_parser.add_argument("--args", help="Tool arguments as JSON")
    test_parser.set_defaults(func=cmd_test)
    
    # Enforce command
    enforce_parser = subparsers.add_parser("enforce", help="Enforce policy on a tool call")
    enforce_parser.add_argument("--tool", required=True, help="Tool name")
    enforce_parser.add_argument("--args", help="Tool arguments as JSON")
    enforce_parser.add_argument("--metadata", help="Additional metadata as JSON")
    enforce_parser.set_defaults(func=cmd_enforce)
    
    # Policy command
    policy_parser = subparsers.add_parser("policy", help="Show current policy information")
    policy_parser.set_defaults(func=cmd_policy_info)
    
    # Interactive command
    interactive_parser = subparsers.add_parser("interactive", help="Start interactive mode")
    interactive_parser.set_defaults(func=cmd_interactive)
    
    # Parse arguments
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    # Execute command
    if hasattr(args, 'func'):
        return args.func(args)
    else:
        parser.print_help()
        return 1


if __name__ == "__main__":
    sys.exit(main())